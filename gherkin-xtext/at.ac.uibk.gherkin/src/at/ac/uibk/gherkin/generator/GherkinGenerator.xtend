/*
 * generated by Xtext 2.10.0
 */
package at.ac.uibk.gherkin.generator

import at.ac.uibk.gherkin.gherkin.Background
import at.ac.uibk.gherkin.gherkin.Description
import at.ac.uibk.gherkin.gherkin.Examples
import at.ac.uibk.gherkin.gherkin.ExamplesDescription
import at.ac.uibk.gherkin.gherkin.Feature
import at.ac.uibk.gherkin.gherkin.FeatureHeader
import at.ac.uibk.gherkin.gherkin.Scenario
import at.ac.uibk.gherkin.gherkin.ScenarioDescription
import at.ac.uibk.gherkin.gherkin.Step
import at.ac.uibk.gherkin.gherkin.Table
import at.ac.uibk.gherkin.gherkin.Tags
import java.net.URLDecoder
import java.util.List
import org.apache.commons.lang3.StringEscapeUtils
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GherkinGenerator extends AbstractGenerator {
	private var boolean hasDesc;
	private var boolean hasTags;
	private var boolean hasSteps;
	private var boolean hasScenarios;
	private var boolean hasStep;
	private var boolean hasScenario;
	private var boolean hasExamplesList;
	private var boolean hasExamples;
	private var boolean hasTable;
	private var boolean hasRows;
	private var boolean hasRow;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// check if exactly one feature is present
		if (resource.contents.size() != 1 || !(resource.contents.head() instanceof Feature)) {
			System.err.println("Failed to generate Feature, there has to be exactly one 'Feature: [name]' line.");
			return;
		}

		// set variables
		hasDesc = false;
		hasTags = false;
		hasSteps = false;
		hasScenarios = false;
		hasStep = false;
		hasScenario = false;
		hasExamplesList = false;
		hasExamples = false;
		hasTable = false;
		hasRows = false;
		hasRow = false;
		
		// obtain feature
		val Feature feature = resource.contents.head() as Feature;

		// get feature file path
		var URI file = resource.URI.trimFileExtension;
		
//		println(file.segments.join("/"));
		
		// uri looks like this: resource/testcase-analysis/src/main/resources/at/ac/uibk/testcase_analysis/data/adambullmer_USDLRegex/json.java
		
		// remove resource & project name
		var String[] segments = file.segments.subList(2, file.segments.length);
		var String[] filePath = convertPath(segments);
		var String[] packagePath;
		var String originalName;

		// if maven structure
		if ("src".equals(filePath.get(0)) && ("main".equals(filePath.get(1)) || "test".equals(filePath.get(1))) && "resources".equals(filePath.get(2))){
			filePath = filePath.subList(1, filePath.length);
			packagePath = filePath.subList(2, filePath.length - 1);
			originalName = segments.subList(3, segments.length).join("/") + ".feature";
		} else {
			// non maven structure so probably only src or so
			filePath = filePath.subList(1, filePath.length);
			packagePath = filePath.subList(0, filePath.length - 1);
			originalName = segments.subList(1, segments.length).join("/") + ".feature";
		}
		
		// generate it
		fsa.generateFile(filePath.join("/") + ".java", feature.generate(packagePath.join("."), filePath.last, originalName));
	}
	
	def convertPath(String[] paths){
		var String[] ret = newArrayOfSize(paths.size);

		for (var int i = 0; i < paths.length; i++){
			var String path = paths.get(i);
			path = URLDecoder.decode(path, "UTF-8");
			path = path.replaceAll("[- .\\[\\]()+,'\"%“”&]+", "__");
			path = path.replaceAll("__+", "__");

			if (path.startsWith("__")){
				path = path.substring(2, path.length);
			}
			if (path.endsWith("__")){
				path = path.substring(0, path.length - 2);
			}

			if ((path.matches("^[0-9].*") || "new".equals(path) || "public".equals(path)) && i != paths.length -1){
				path = "a__" + path;
			}

			ret.set(i, path);			
		}
		ret.set(paths.length - 1, "Feature__" + ret.last);
		
		return ret;
	}

	def generate(Feature f, String packagePath, String fileName, String originalName) {
		'''
			package «packagePath»;
			
			import java.util.*;
			
			import at.ac.uibk.feature.model.*;
			
			public class «fileName» implements FeatureBuilder {
			
				public Feature build() {
					Feature f = new Feature();
					f.setFileName("«originalName»");
					«IF f.header != null»
					// set feature header here
					«f.header.generate»
					«ENDIF»

					«IF f.desc != null && f.desc.lines != null && f.desc.lines.length > 0»
					// set feature description here
					«f.desc.generate»
					f.setDescription(desc);
					«ENDIF»

					«IF f.background != null»
					// set feature background here
					«f.background.generate»
					f.setBackground(scenario);
					«ENDIF»
					
					«IF f.scenarios != null»
					// set feature scenarios here
					«initVariable("scenarios")»
					scenarios = new ArrayList<Scenario>();

					«FOR scenario : f.scenarios»

					«scenario.generate»
					scenarios.add(scenario);
					«ENDFOR»
					f.setScenarios(scenarios);
					«ENDIF»
					
					return f;
				}
			
			}
		'''
	}

	private def initVariable(String name){
		switch name {
			case "desc": 
				if (!hasDesc){
					hasDesc = true;
					return '''
						List<String> desc;
					'''
				}
			case "tags": 
				if (!hasTags){
					hasTags = true;
					return '''
						List<String> tags;
					'''
				}
			case "steps": 
				if (!hasSteps){
					hasSteps = true;
					return '''
						List<Step> steps;
					'''
				}
			case "scenarios": 
				if (!hasScenarios){
					hasScenarios = true;
					return '''
						List<Scenario> scenarios;
					'''
				}
			case "step": 
				if (!hasStep){
					hasStep = true;
					return '''
						Step step;
					'''
				}
			case "scenario": 
				if (!hasScenario){
					hasScenario = true;
					return '''
						Scenario scenario;
					'''
				}
			case "examplesList":
				if (!hasExamplesList){
					hasExamplesList = true;
					return '''
						List<Examples> examplesList;
					'''
				}
			case "examples": 
				if (!hasExamples){
					hasExamples = true;
					return '''
						Examples examples;
					'''
				}
			case "table": 
				if (!hasTable){
					hasTable = true;
					return '''
						Table table;
					'''
				}
			case "rows": 
				if (!hasRows){
					hasRows = true;
					return '''
						List<List<String>> rows;
					'''
				}
			case "row": 
				if (!hasRow){
					hasRow = true;
					return '''
						List<String> row;
					'''
				}
			default: return ""
		}
	}
	
	def generate(FeatureHeader header){
		'''
			f.setKeyword("«header.keyword»");
			«IF header.name != null && header.name.length > 0»
			f.setName("«header.name.toJavaString»");
			«ENDIF»

			«IF header.tags != null»
			// set feature tags here
			«header.tags.generate»
			f.setTags(tags);
			«ENDIF»
		'''
	}

	def generate(Description desc){
		'''
			«initVariable("desc")»
			desc = null;
			desc = new ArrayList<String>();
			«FOR line : desc.lines»
			desc.add("«line.name.toJavaString»");
			«ENDFOR»
		'''
	}
	
	def generate(ScenarioDescription desc){
		'''
			«initVariable("desc")»
			desc = null;
			desc = new ArrayList<String>();
			«FOR line : desc.lines»
			desc.add("«line.name.toJavaString»");
			«ENDFOR»
		'''		
	}

	def generate(ExamplesDescription desc){
		'''
			«initVariable("desc")»
			desc = null;
			desc = new ArrayList<String>();
			«FOR line : desc.lines»
			desc.add("«line.name.toJavaString»");
			«ENDFOR»
		'''		
	}
	
	def generate(Tags tags){
		'''
			«initVariable("tags")»
			tags = new ArrayList<String>();
			«FOR tag : tags.tags»
			tags.add("«StringEscapeUtils.escapeJava(tag)»");
			«ENDFOR»
		'''
	}
	
	def generate(Background background){
		'''
			«initVariable("scenario")»
			scenario = new Scenario();
			scenario.setType(ScenarioType.BACKGROUND);

			«IF background.name != null && background.name.length > 0»
			scenario.setName("«background.name.toJavaString»");
			«ENDIF»
			«IF background.tags != null && background.tags.tags != null && background.tags.tags.length > 0»
			«background.tags.generate»
			scenario.setTags(tags);
			«ENDIF»
			«IF background.desc != null && background.desc.lines != null && background.desc.lines.length > 0»
			«background.desc.generate»
			scenario.setDescription(desc);
			«ENDIF»
			«IF background != null && background.steps != null && background.steps.length > 0»
			«initVariable("steps")»
			steps = new ArrayList<Step>();
			«FOR step : background.steps»
			
			«step.generate»
			steps.add(step);
			«ENDFOR»
			scenario.setSteps(steps);
			«ENDIF»
		'''
	}
	
	def generate(Step step){
		'''
			«initVariable("step")»
			step = new Step();
			step.setKeyword("«step.keyword»");
			«IF step.name != null && step.name.length > 0»
			step.setName("«step.name.toJavaString»");
			«ENDIF»
			«IF step.tags != null && step.tags.tags != null && step.tags.tags.length > 0»
			«step.tags.generate»
			step.setTags(tags);
			«ENDIF»
			«IF step.table != null && step.table.rows.length > 0»
			«step.table.generate»
			step.setTable(table);
			«ENDIF»
			«IF step.docString != null»
			step.setDocString("«StringEscapeUtils.escapeJava(step.docString.join("\n"))»");
			«ENDIF»
		'''
	}
	
	def generate(Scenario scen){
		'''
			«initVariable("scenario")»
			scenario = new Scenario();
			«IF scen.keyword != null && scen.keyword.matches("Scenario[ \\t]*:")»
			scenario.setType(ScenarioType.SCENARIO);
			«ELSEIF scen.keyword != null && scen.keyword.matches("Scenario[ \\t]+Outline[ \\t]*:")»
			scenario.setType(ScenarioType.SCENARIO_OUTLINE);
			«ENDIF»
			«IF scen.name != null && scen.name.length >0»
			scenario.setName("«scen.name.toJavaString»");
			«ENDIF»
			«IF scen.tags != null && scen.tags.tags != null && scen.tags.tags.length > 0»
			«scen.tags.generate»
			scenario.setTags(tags);
			«ENDIF»
			«IF scen.desc != null && scen.desc.lines != null && scen.desc.lines.length > 0»
			«scen.desc.generate»
			scenario.setDescription(desc);
			«ENDIF»
			«IF scen.steps != null && scen.steps.length > 0»
			«initVariable("steps")»
			steps = new ArrayList<Step>();
			«FOR step : scen.steps»
			
			«step.generate»
			steps.add(step);
			«ENDFOR»
			scenario.setSteps(steps);
			«ENDIF»
			«IF scen.examples != null && scen.examples.length > 0»
			«initVariable("examplesList")»
			examplesList = new ArrayList<Examples>();
			«FOR examples : scen.examples»
			«examples.generate»
			examplesList.add(examples);
			«ENDFOR»
			scenario.setOutline(examplesList);
			«ENDIF»
		'''
	}

	def generate(Examples ex){
		'''
			«initVariable("examples")»
			examples = new Examples();
			«IF ex.name != null && ex.name.length > 0»
			examples.setName("«ex.name.toJavaString»");
			«ENDIF»
			«IF ex.tags != null && ex.tags.tags != null && ex.tags.tags.length > 0»
			«ex.tags.generate»
			examples.setTags(tags);
			«ENDIF»
			
			«IF ex.desc != null && ex.desc.lines != null && ex.desc.lines.length > 0»
			«ex.desc.generate»
			examples.setDescription(desc);
			«ENDIF»
			«IF ex.table != null && ex.table.rows != null && ex.table.rows.length > 0»
			«ex.table.generate»
			examples.setTable(table);
			«ENDIF»
		'''
	}
	
	def generate(Table table){
//		val builder = new StringConcatenation();
//		builder.append(initVariable("table"));
//		
//		builder.append("table = new Table();");
//		builder.newLine;
//		
//		builder.append(initVariable("rows"));
//		builder.append("rows = new ArrayList<List<String>>();");
//		builder.newLine;
//		
//		for (row : table.rows){
//			builder.append(initVariable("row"));
//			builder.append('''row = new ArrayList<String>();''');
//			builder.newLine;
//			for (cell : row.cells){
//				builder.append('''row.add("«cell.name.toJavaString»");''');
//				builder.newLine;
//			}
//			builder.append('''rows.add(row);''')
//		}
//		
//		var header = table.rows.head;
//		for (cell : header.cells){
//			builder.append('''cols.put("«cell.name.toJavaString»", new ArrayList<String>());''')
//			builder.newLine;
//		}
//		
//		for(row : table.rows.tail){
//			for (var i = 0; i < row.cells.length; i++){
//				builder.append('''cols.get("«header.cells.get(i).name.toJavaString»").add("«row.cells.get(i).name.toJavaString»");''');
//				builder.newLine;
//			}
//		}
//		
//		builder.append("table.setRows(rows);")
//		builder.newLine;
//		
//		return builder.toString;
		
		'''
			«initVariable("table")»
			table = new Table();
			«IF table.rows != null && table.rows.length > 0»
			
			«initVariable("rows")»
			rows = new ArrayList<List<String>>();
			«FOR row : table.rows»
			«IF row.cells != null»
			«initVariable("row")»
			row = new ArrayList<String>();
			«FOR cell : row.cells»
			row.add("«cell.name.toJavaString»");
			«ENDFOR»
			rows.add(row);
			«ENDIF»
			«ENDFOR»
			table.setRows(rows);
			«ENDIF»
		'''
	}
	
	def toJavaString(List<String> words){
		return StringEscapeUtils.escapeJava(words.join(" "));
	}
}
