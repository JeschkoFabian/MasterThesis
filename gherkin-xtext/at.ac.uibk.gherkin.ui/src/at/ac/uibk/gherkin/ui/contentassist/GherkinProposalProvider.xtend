/*
 * generated by Xtext 2.10.0
 */
package at.ac.uibk.gherkin.ui.contentassist

import at.ac.uibk.gherkin.gherkin.Cell
import at.ac.uibk.gherkin.gherkin.Examples
import at.ac.uibk.gherkin.gherkin.Row
import at.ac.uibk.gherkin.gherkin.Scenario
import at.ac.uibk.gherkin.gherkin.Step
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class GherkinProposalProvider extends AbstractGherkinProposalProvider {

//	@Inject extension GherkinGrammarAccess
	
	override void completeFeatureHeader_Keyword(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	    val proposal = "Feature:";
	    
    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
		    acceptor.accept(createCompletionProposal(proposal + " [name]", proposal, null, context))
    	}
	}

	override void completeScenario_Keyword(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	    val proposalStrings = #["Scenario:", "Scenario Outline:"];
	    
	    for (String proposal : proposalStrings){
	    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
			    acceptor.accept(createCompletionProposal(proposal + " [name]", proposal, null, context))
	    	}
	    }
	}
	
	override void completeBackground_Keyword(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	    val proposal = "Background:";
	    
    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
		    acceptor.accept(createCompletionProposal(proposal + "\n\t", proposal, null, context))
    	}
	}
	
	override void completeExamples_Keyword(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	    val proposal = "Examples:";
	    
    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
		    acceptor.accept(createCompletionProposal(proposal + "\n\t|[header]|", proposal, null, context))
    	}
	}
	

//	override void complete_Example(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		// subclasses may override
//	}

//	override void complete_EXAMPLE(EObject model, RuleCall ruleCall,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		acceptor.accept(createCompletionProposal("Examples: ", context));
//	}

//	def void complete_Step(ScenarioWithOutline model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		var Example example = model.getExample();
//		if (example == null) {
//			return;
//		}
//		var ExampleRow heading = example.getHeading();
//		if (heading == null) {
//			return;
//		}
//		var String firstChar = calculateFirstChar(context);
//		for (String cell : heading.getCells()) {
//			acceptor.accept(createCompletionProposal(context.getPrefix()
//					+ firstChar + cell + ">", cell, null, context));
//		}
//	}

	override protected boolean isValidProposal(String proposal, String prefix,
			ContentAssistContext context) {
		return true;
	}

//	def private String calculateFirstChar(ContentAssistContext context) {
//		var String prefix = context.getPrefix();
//		var String start = "<";
//		for (var int i = prefix.length() - 1; i >= 0; i--) {
//			var char c = prefix.charAt(i);
//			if (c == '<') {
//				start = "";
//				return start;
//			}
//			if (c == '>') {
//				return start;
//			}
//		}
//		return start;
//	}

	override void completeStep_Keyword(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	    val proposalStrings = #["Given ", "When ", "Then ", "And ", "But "];
	    
	    for (String proposal : proposalStrings){
	    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
			    acceptor.accept(createCompletionProposal(proposal, proposal, null, context))
	    	}
	    }
	}
	
	override void completeStep_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		var proposalStrings = newArrayList();
		
		if (model instanceof Step){
			// variable name proposals from the step table
			if (model.table != null && model.table.rows.size > 0){
				var Row heading = model.table.rows.get(0);
				for (Cell cell : heading.getCells()) {
					var String cellText = cell.name.join(" ");
					proposalStrings.add(cellText);			
				}
			}
			
			// variable name proposals from the parent scenario
			var parent = model.eContainer;
			if (parent instanceof Scenario){
				var EList<Examples> examples = parent.examples;
				if (examples != null){
					for (Examples example : examples){
						if(example.table != null && example.table.rows.size > 0) {
							var Row heading = example.table.rows.get(0);
		
							for (Cell cell : heading.getCells()) {
								var String cellText = cell.name.join(" ");
								proposalStrings.add(cellText);			
							}
						}
					}
				} 
			}
		}
		
	    for (String proposal : proposalStrings){
	    	if (context.prefix.equals("") || ("<" + proposal + ">").contains(context.prefix)){
			    acceptor.accept(createCompletionProposal("<" + proposal + ">", proposal, null, context))
	    	}
	    }		
	}

	
	override void complete_DescriptionLine(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DescriptionLine(model, ruleCall, context, acceptor);

	    val proposalStrings = #["As a ", "In order to ", "I want to "];
	    
	    for (String proposal : proposalStrings){
	    	if (context.prefix.equals("") || proposal.contains(context.prefix)){
			    acceptor.accept(createCompletionProposal(proposal, proposal, null, context))
	    	}
	    }
	}

//	override void complete_Step(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//	    val proposalStrings = #["Given ", "When ", "Then ", "And ", "But "];
//	    
//	    for (String proposal : proposalStrings){
//		    acceptor.accept(createCompletionProposal(proposal, proposal, null, context))
//	    }
//	}

	
//	override void complete_AsA(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		asAAccess.group.createKeywordProposal(context,acceptor);
//	}
//
//	override void complete_InOrderTo(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		inOrderToAccess.group.createKeywordProposal(context,acceptor);
//	}
//
//	override public void complete_IWantTo(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		IWantToAccess.group.createKeywordProposal(context,acceptor);
//	}
//	
//	def createKeywordProposal(Group group, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//	    if (group == null) {
//	        return null
//	    }
//	    val proposalString = group.elements.filter(Keyword).map[value].join(" ") + " "
//	    acceptor.accept(createCompletionProposal(proposalString, proposalString, null, context))
//	}

}
